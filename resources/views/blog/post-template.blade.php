@extends('/blog/main')
@section('content')
<div class="container mx-auto flex flex-wrap py-3 mt-12 dark:bg-gray-800">
    <div class="w-full md:w-2/3 flex flex-col px-4 m-b-3 md:px-6 text-xl text-white-800 leading-normal " style="font-family:Georgia,serif;">
        <!-- Article Image -->
        <a href="#" class="hover:opacity-75" title="logo">
            <img src="{{Voyager::image( setting('site.logo'))}}">
        </a>
        <!--Title-->
        <div class="font-sans">
            <h1 class="font-bold font-sans break-normal text-green-400 pt-6 pb-2 text-3xl md:text-4xl">Post Template</h1>
            <p class="text-sm pb-3 text-gray-500 dark:text-gray-400">
                By <a href="#" class="font-semibold text-gray-400 hover:text-gray-200">bahaeddine</a>, Published on date
            </p>
        </div>
        <!--Post Content-->
        
        <blockquote class="p-4 my-4 border-l-4 border-gray-300 bg-gray-50 dark:border-gray-500 dark:bg-gray-800">
            <p class="text-xl italic font-medium leading-relaxed text-gray-900 dark:text-white">Service providers are the backbone of Laravel's service container. They are responsible for registering all of the application's services and dependencies. When you run a Laravel application, the service providers are loaded automatically, and they register all the services that the application needs to function.</p>
        </blockquote>
        <p class="pt-6 font-light text-grey-20 dark:text-white text-base">Service providers are essentially a way of decoupling the components of your application. Instead of hard-coding dependencies throughout your codebase, you can use service providers to register them in a central location. This makes it easier to manage dependencies and swap them out as needed.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Laravel provides three types of service providers: Application Service Providers, Route Service Providers, and Package Service Providers. Let's take a closer look at each of these types.</p>

        <h4 class="pt-6 font-light leading-relaxed text-blue-700">Application Service Providers</h4>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Application Service Providers are the most common type of service provider in Laravel. They are responsible for registering services that are used throughout the entire application. You can register application service providers in the <code class="font-bold">config/app.php</code> file.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Here's an example of an application service provider that registers a new <code class="font-bold">Logger</code> instance:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li><font color="orange">namespace</font>&nbsp;App\Providers<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="orange">use</font>&nbsp;Illuminate\Support\ServiceProvider<font color="#339933">;</font></li><li><font color="orange">use</font>&nbsp;Monolog\Logger<font color="#339933">;</font></li><li><font color="orange">use</font>&nbsp;Monolog\Handler\StreamHandler<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="orange">class</font>&nbsp;LoggingServiceProvider&nbsp;<font color="orange">extends</font>&nbsp;ServiceProvider</li><li><font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="orange">public</font>&nbsp;<font color="orange">function</font>&nbsp;register<font color="#009900">&#40;</font><font color="#009900">&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">$this</font><font color="#339933">-&gt;</font><font color="white">app</font><font color="#339933">-&gt;</font><font color="white">singleton</font><font color="#009900">&#40;</font>Logger<font color="#339933">::</font><font color="orange">class</font><font color="#339933">,</font>&nbsp;<font color="orange">function</font>&nbsp;<font color="#009900">&#40;</font><font color="red">$app</font><font color="#009900">&#41;</font>&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">$log</font>&nbsp;<font color="#339933">=</font>&nbsp;<font color="orange">new</font>&nbsp;Logger<font color="#009900">&#40;</font><font color="yellow">'name'</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">$log</font><font color="#339933">-&gt;</font><font color="white">pushHandler</font><font color="#009900">&#40;</font><font color="orange">new</font>&nbsp;StreamHandler<font color="#009900">&#40;</font>storage_path<font color="#009900">&#40;</font><font color="yellow">'logs/laravel.log'</font><font color="#009900">&#41;</font><font color="#339933">,</font>&nbsp;Logger<font color="#339933">::</font><font color="white">DEBUG</font><font color="#009900">&#41;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#b1b100">return</font>&nbsp;<font color="red">$log</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font></li><li><font color="#009900">&#125;</font></li></ol></blockquote>
            </code>
        </div>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">In this example, we're registering a new <code class="font-bold">Logger</code> instance that writes logs to a file. We're using the <code class="font-bold">singleton</code> method to register the <code class="font-bold">Logger</code> instance as a singleton, which means that the same instance will be returned every time it's requested.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">For example, to retrieve all posts from the database, a developer could use the following code:</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">To use this service provider, we need to register it in the <code class="font-bold">config/app.php</code> file:</p>

        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700  pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
               <blockquote><ol><li><font color="yellow">'providers'</font>&nbsp;<font color="#339933">=&gt;</font>&nbsp;<font color="#009900">&#91;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#666666">//&nbsp;...</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;App\Providers\LoggingServiceProvider<font color="#339933">::</font><font color="red">class</font><font color="#339933">,</font></li><li><font color="#009900">&#93;</font><font color="#339933">,</font></li></ol></blockquote>
            </code>
        </div>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Once the service provider is registered, we can use the <code class="font-bold">Logger</code> instance throughout the application like this:</p>

        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700  pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
               <blockquote><ol><li><font color="red">use</font>&nbsp;Monolog\Logger<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="yellow">$log</font>&nbsp;<font color="#339933">=</font>&nbsp;app<font color="#009900">&#40;</font>Logger<font color="#339933">::</font><font color="red">class</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li><font color="yellow">$log</font><font color="#339933">-&gt;</font><font color="white">info</font><font color="#009900">&#40;</font><font color="yellow">'This&nbsp;is&nbsp;a&nbsp;log&nbsp;message'</font><font color="#009900">&#41;</font><font color="#339933">;</font></li></ol></blockquote>
            </code>
        </div>

       <h4 class="pt-6 font-light leading-relaxed text-blue-700">Route Service Providers</h4>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Route Service Providers are used to register middleware or route bindings that are specific to a group of routes. For example, you may want to define a middleware that is only applied to a group of routes, or you may want to define a route binding that is only available for a specific set of routes.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Here's an example of a Route Service Provider that registers a new middleware:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li><font color="orange">namespace</font>&nbsp;App\Providers<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="orange">use</font>&nbsp;Illuminate\Foundation\Support\Providers\RouteServiceProvider&nbsp;<font color="#b1b100">as</font>&nbsp;ServiceProvider<font color="#339933">;</font></li><li><font color="orange">use</font>&nbsp;Illuminate\Support\Facades\Route<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="orange">class</font>&nbsp;MyRouteServiceProvider&nbsp;<font color="orange">extends</font>&nbsp;ServiceProvider</li><li><font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="orange">protected</font>&nbsp;<font color="red">$middlewareGroups</font>&nbsp;<font color="#339933">=</font>&nbsp;<font color="#009900">&#91;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="yellow">'my-group'</font>&nbsp;<font color="#339933">=&gt;</font>&nbsp;<font color="#009900">&#91;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\App\Http\Middleware\MyMiddleware<font color="#339933">::</font><font color="orange">class</font><font color="#339933">,</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#93;</font><font color="#339933">,</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#93;</font><font color="#339933">;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="orange">public</font>&nbsp;<font color="orange">function</font>&nbsp;boot<font color="#009900">&#40;</font><font color="#009900">&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent<font color="#339933">::</font><font color="white">boot</font><font color="#009900">&#40;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Route<font color="#339933">::</font><font color="white">model</font><font color="#009900">&#40;</font><font color="yellow">'my-model'</font><font color="#339933">,</font>&nbsp;MyModel<font color="#339933">::</font><font color="orange">class</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font></li><li><font color="#009900">&#125;</font></li></ol></blockquote>
            </code>
        </div>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">In this example, we're registering a new middleware called <code class="font-bold">MyMiddleware</code> in a middleware group called <code class="font-bold">my-group</code>. We're using the <code class="font-bold">$middlewareGroups</code> property to define the middleware group.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">We're also using the <code class="font-bold"> Route::model</code> method to register a route model binding for a model called <code class="font-bold">MyModel</code>. This route model binding will only be available for routes that are registered after the Route Service Provider is loaded.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">To use this Route Service Provider, we need to register it in the <code class="font-bold">config/app.php</code> file:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li><font color="yellow">'providers'</font>&nbsp;<font color="#339933">=&gt;</font>&nbsp;<font color="#009900">&#91;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#666666">//&nbsp;...</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;App\Providers\MyRouteServiceProvider<font color="#339933">::</font><font color="orange">class</font><font color="#339933">,</font></li><li><font color="#009900">&#93;</font><font color="#339933">,</font></li></ol></blockquote>
            </code>
        </div>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Once the Route Service Provider is registered, we can use the middleware in our routes like this:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li>Route<font color="#339933">::</font><font color="white">get</font><font color="#009900">&#40;</font><font color="yellow">'/my-route/{my-model}'</font><font color="#339933">,</font>&nbsp;<font color="orange">function</font>&nbsp;<font color="#009900">&#40;</font>MyModel&nbsp;<font color="red">$myModel</font><font color="#009900">&#41;</font>&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#666666">//&nbsp;...</font></li><li><font color="#009900">&#125;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li></ol></blockquote>
            </code>
        </div>

        <h4 class="pt-6 font-light leading-relaxed text-blue-700">Package Service Providers</h4>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Package Service Providers are used to register services that are specific to a Laravel package. If you're building a Laravel package, you can use a Package Service Provider to register your package's services.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Here's an example of a Package Service Provider that registers a new Facade for a package:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li><font color="orange">namespace</font>&nbsp;MyPackage<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="orange">use</font>&nbsp;Illuminate\Support\ServiceProvider<font color="#339933">;</font></li><li><font color="orange">use</font>&nbsp;MyPackage\Facades\MyFacade<font color="#339933">;</font></li><li>&nbsp;</li><li><font color="orange">class</font>&nbsp;MyServiceProvider&nbsp;<font color="orange">extends</font>&nbsp;ServiceProvider</li><li><font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="orange">public</font>&nbsp;<font color="orange">function</font>&nbsp;register<font color="#009900">&#40;</font><font color="#009900">&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">$this</font><font color="#339933">-&gt;</font><font color="white">app</font><font color="#339933">-&gt;</font><font color="white">bind</font><font color="#009900">&#40;</font><font color="yellow">'my-package'</font><font color="#339933">,</font>&nbsp;<font color="orange">function</font>&nbsp;<font color="#009900">&#40;</font><font color="red">$app</font><font color="#009900">&#41;</font>&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#b1b100">return</font>&nbsp;<font color="orange">new</font>&nbsp;MyPackage<font color="#009900">&#40;</font><font color="red">$app</font><font color="#009900">&#91;</font><font color="yellow">'config'</font><font color="#009900">&#93;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">$this</font><font color="#339933">-&gt;</font><font color="white">app</font><font color="#339933">-&gt;</font><font color="white">bind</font><font color="#009900">&#40;</font><font color="yellow">'my-facade'</font><font color="#339933">,</font>&nbsp;<font color="orange">function</font>&nbsp;<font color="#009900">&#40;</font><font color="#009900">&#41;</font>&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#b1b100">return</font>&nbsp;<font color="orange">new</font>&nbsp;MyFacade<font color="#009900">&#40;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font></li><li>&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="orange">public</font>&nbsp;<font color="orange">function</font>&nbsp;boot<font color="#009900">&#40;</font><font color="#009900">&#41;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#123;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#666666">//&nbsp;...</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#009900">&#125;</font></li><li><font color="#009900">&#125;</font></li></ol></blockquote>
            </code>
        </div>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">In this example, we're registering a new Facade called <code class="font-bold">MyFacade</code>. We're using the <code class="font-bold">bind</code> method to register the <code class="font-bold">MyFacade</code>instance with the application container.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">To use this Package Service Provider, we need to register it in the <code class="font-bold">config/app.php</code> file:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li><font color="yellow">'providers'</font>&nbsp;<font color="#339933">=&gt;</font>&nbsp;<font color="#009900">&#91;</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#666666">//&nbsp;...</font></li><li>&nbsp;&nbsp;&nbsp;&nbsp;MyPackage\MyServiceProvider<font color="#339933">::</font><font color="orange">class</font><font color="#339933">,</font></li><li><font color="#009900">&#93;</font><font color="#339933">,</font></li></ol></blockquote>
            </code>
        </div>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Once the Package Service Provider is registered, we can use the <code class="font-bold">MyFacade</code> instance like this:</p>
        <div class="coding inverse-toggle px-4 pt-4 shadow-lg text-red-400 text-sm bg-gray-700 pb-4 pt-4 rounded-lg leading-normal overflow-hidden mt-12 mb-12">
            <code class="php p-12" style="font-family:monospace;">
                <blockquote><ol><li><font color="orange">use</font>&nbsp;MyPackage\Facades\MyFacade<font color="#339933">;</font></li><li>&nbsp;</li><li>MyFacade<font color="#339933">::</font><font color="white">doSomething</font><font color="#009900">&#40;</font><font color="#009900">&#41;</font><font color="#339933">;</font></li></ol></blockquote>
            </code>
        </div>

        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">Laravel Eloquent provides a powerful and easy-to-use ORM system for working with databases in PHP. Its simple and expressive syntax, support for multiple database systems, and rich set of features make it a popular choice for web developers who need to work with databases in their applications.</p>
        <p class="pt-6 font-light leading-relaxed text-grey-20 dark:text-white text-base">By leveraging Eloquent, developers can focus on building their applications rather than worrying about the complexities of interacting with databases. Whether you're a seasoned Laravel developer or just getting started with the framework, Eloquent is a powerful tool that can help you create robust and efficient database-driven applications.</p>
    </div>
    <!-- sidebar -->
    @include('/blog/layouts.sidebar')
</div>
@endsection
